@page

@model Scripture_Journal.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Journal Entries</h1>

<div class="create-link">
    <a asp-page="Create">Create New Journal Entry</a>
</div>

<hr />
<!-- TODO: Put the fields into one form.  Use a select list to pick sorting by book or date.  Then when the for submits, have logic to decide what to search/sort by -->
<form id="newForm">
    <p>Note Title: <input type="text" asp-for="TitleSearchString" /></p>

    <span>Book Name: </span><select asp-for="BookSearchString" asp-items="Model.Books">
        <option value="">All</option>
    </select>
    <br />
    <span>Sort By: </span><select id="SortedByList" asp-for="SortedBy">
        <option value="default">ID (Default)</option>
        <option value="book">Book</option>
        <option value="date">Date Added</option>
    </select>
    <br />
    <input type="submit" value="Filter" />
</form>
<hr />
<form id="clearResults">
    <p>
        <input type="hidden" asp-for="ClearFilter" value="true" />
        <input type="submit" value="Clear Filters" />
    </p>
</form>
<div class="scrolling">
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].ID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].EntryDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].ScriptureBook)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].ScriptureChapter)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].ScriptureVerse)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScriptureNote[0].JournalEntry)
                </th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.ScriptureNote)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.ID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EntryDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ScriptureBook)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ScriptureChapter)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ScriptureVerse)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.JournalEntry)
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>